{"version":3,"sources":["colors/index.js","variables/index.js","components/Button/styles.js","components/Button/Button.js","components/InputField/styles.js","components/InputField/InputField.js","components/InputMathOperators/styles.js","components/InputMathOperators/InputMathOperators.js","components/ListItem/styles.js","components/Select/styles.js","components/TasksList/styles.js","components/InputField/InputFieldResult.js","components/TasksList/taskListSlice.js","components/ListItem/ListItem.js","components/TasksList/TasksList.js","components/Header/styles.js","components/Header/Header.tsx","utils/createTasks.js","utils/calculateDoneTasks.js","utils/msToTime.js","components/Statistics/style.js","components/Statistics/Statistics.js","components/Statistics/statisticsSlice.js","styles.js","translations/en.js","translations/pl.js","components/Select/Option.js","components/Select/Select.js","translations/options.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["white","darkGreen","darkerGreen","red","paddingTopBottom","borderRadius","border","opacity","GroupButtonWrapper","styled","div","pulseLight","keyframes","GlassButtonWrapper","button","props","color","displayName","Button","label","WrapperInputField","Label","horizontalLabel","LabelField","LabelResult","Input","input","LabelTask","span","inputStyles","options","isCorrect","isCheckTasksActive","ref","current","borderColor","style","InputField","title","value","className","placeholder","onChange","max","min","type","defaultProps","WrapperInputMathOperators","disabledStyles","disabled","cursor","InputMathOperators","htmlFor","id","prototype","PropTypes","string","bool","undefined","LiWrapper","li","CounterItem","SelectWrapper","Trigger","OptionsWrapper","OptionWrapper","TaskListWrapper","ul","InputFieldResult","taskToDo","useRef","taskListSlice","createSlice","name","initialState","tasks","reducers","generateTasksReducer","state","action","payload","updateUserAnswer","updateTask","actionPayload","map","el","userAnswer","correctDone","correctResult","done","actions","ListItem","dispatch","useDispatch","t","useTranslation","marginLeft","e","target","TasksList","taskObj","task","HeaderWrapper","h4","Header","stringMath","require","createTasks","howManyTasks","howManyValues","maximumSingleValue","typeOfMathOperators","isPositiveResults","arrOfTasks","i","numberValue","j","number","Math","floor","random","push","sort","a","b","matchTask","index","randomMathOperator","length","join","String","calculateDoneTasks","tasksArray","tasksLength","filter","correctAnswer","toFixed","leftToDo","correctToDo","endTime","Date","getTime","msToTime","duration","seconds","minutes","hours","InformationAboutResultWrapper","Statistics","statistics","useSelector","isEqual","checks","startTime","isTaskFinish","statisticsSlice","updateChecks","resetChecks","updateCorrectDone","updateStartTime","updateEndTime","BottomSection","SectionWrapper","en","howManyValuesToCalculate","typeOperations","addition","subtraction","multiplication","division","positiveResults","generateTask","checkTask","editTask","backToTop","enterTheResult","chooseLanguage","checkCounter","correctlyDone","correctLeftToDo","yourTime","pl","Option","onClick","Select","useState","open","setOpen","find","lang","default","userChoice","setUserChoice","handleOption","languageOptions","i18n","use","initReactI18next","init","resources","translation","lng","fallbackLng","interpolation","escapeValue","App","taskList","setHowManyTasks","setHowManyValues","setMaximumSingleValue","setTypeOfMathOperators","setIsCheckTasksActive","setIsPositiveResults","generateTasks","newTask","handleMathOperatorChange","mathOperator","checked","newArr","fallback","padding","column","changeLanguage","includes","backgroundColor","window","confirm","scroll","top","behavior","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","container","document","getElementById","createRoot","render","StrictMode"],"mappings":"qUAAaA,EAAQ,OAIRC,EAAY,UACZC,EAAc,UAGdC,EAAM,UCLNC,EAAmB,QAGnBC,EAAe,MACfC,EAAM,UAFQ,MAER,YAAqBN,EAArB,UAKNO,GAFY,UAAMP,GAER,ICPVQ,EAAqBC,UAAOC,IAAV,iIAKTR,GAGTS,EAAaC,oBAAH,ygBAwBVC,EAAqBJ,UAAOK,OAAV,okBACpB,SAACC,GAAD,OAAWA,EAAMC,MAAQD,EAAMC,MAAQ,SAatCV,EACOD,EAIGM,GAgDtBH,EAAmBS,YAAc,qBACjCJ,EAAmBI,YAAc,qB,uBC9FlBC,I,YAAAA,EARf,YAAoC,IAAnBC,EAAkB,EAAlBA,MAAUJ,EAAQ,iBAC/B,OACI,cAACF,EAAD,2BAAwBE,GAAxB,aACKI,MCDAC,EAAoBX,UAAOC,IAAV,+DACjBN,GAIAiB,EAAQZ,UAAOU,MAAV,qGAGE,qBAAEG,gBAAuC,MAAQ,WAC1DtB,GAGEuB,EAAad,kBAAOY,EAAPZ,CAAH,uDAIVe,EAAcf,kBAAOY,EAAPZ,CAAH,+FAMXgB,EAAQhB,UAAOiB,MAAV,ubAGIzB,EACXD,EACCM,EACOD,EAIGM,EAOTX,EACEO,GAQFoB,EAAYlB,UAAOmB,KAAV,+CAITC,EAAc,WAAmB,IAAlBC,EAAiB,uDAAP,GAC3BC,EAAsCD,EAAtCC,UAAWC,EAA2BF,EAA3BE,mBAAoBC,EAAOH,EAAPG,IAEtC,OAAKA,EAAIC,QAEJF,EAME,CACHG,YAAY,GAAD,OAAKJ,EAAY/B,EAAQG,IAN7B,CACHgC,YAAaF,EAAIC,QAAQE,MAAMD,aAJd,IAa7Bf,EAAkBH,YAAc,oBAChCI,EAAMJ,YAAc,QACpBM,EAAWN,YAAc,aACzBO,EAAYP,YAAc,cAC1BQ,EAAMR,YAAc,QACpBU,EAAUV,YAAc,Y,2FC/DxB,SAASoB,EAAT,GAA4G,IAAvFC,EAAsF,EAAtFA,MAAOC,EAA+E,EAA/EA,MAAOC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,YAAanB,EAAgD,EAAhDA,gBAAiBoB,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,IAAQ7B,EAAQ,iBACvG,OACI,cAACK,EAAD,UACI,eAACG,EAAD,CAAiBD,kBAAjB,UAAoCgB,EAChC,cAACb,EAAD,2BACQV,GADR,IAESwB,QAAOC,YAAWE,WAAUC,MAAKC,MACtCC,KAAK,SACLJ,YAAaA,GAAeH,UAbhDD,EAAWS,aAAe,CACtBH,IAAK,EACLC,IAAK,GAkBMP,I,MAAAA,K,oBCvBFU,GAA4BtC,UAAOC,IAAV,gJLFX,MKIRL,ELAO,MKIZC,GAIDe,GAAQZ,UAAOU,MAAV,iTAKPnB,EAGWW,GAOTc,GAAQhB,UAAOiB,MAAV,6DAKLsB,GAAiB,WAAmB,IAAlBlB,EAAiB,uDAAP,GAC7BmB,EAAanB,EAAbmB,SACR,MAAO,CACHC,OAAQD,GAAY,cACpB1C,QAAS0C,GAAQ,UAAO1C,KAIhCwC,GAA0B9B,YAAc,4BACxCI,GAAMJ,YAAc,QACpBQ,GAAMR,YAAc,Q,2BChCpB,SAASkC,GAAT,GAAyD,IAA5BN,EAA2B,EAA3BA,KAAMI,EAAqB,EAArBA,SAAalC,EAAQ,kBAEpD,OACI,cAACgC,GAAD,UACI,eAAC,GAAD,CAAOK,QAASP,EAAMT,MAAOY,GAAe,CAACC,aAA7C,UACKJ,EACD,cAAC,GAAD,2BAAW9B,GAAX,IACSkC,WACFJ,KAAK,WACLQ,GAAIR,EACJT,MAAOY,GAAe,CAACC,qBApB9CE,GAAmBG,UAAY,CAC3BT,KAAMU,KAAUC,OAChBP,SAAUM,KAAUE,MAGxBN,GAAmBL,aAAe,CAC9BD,UAAMa,EACNT,UAAU,GAoBCE,I,kBAAAA,MC5BFQ,GAAYlD,UAAOmD,GAAV,iIAQTC,GAAcpD,UAAOmB,KAAV,6DACb5B,EACEO,GAGboD,GAAU1C,YAAc,YACxB4C,GAAY5C,YAAc,cCbnB,I,GAAM6C,GAAgBrD,UAAOC,IAAV,iHAObqD,GAAUtD,UAAOC,IAAV,iKAEET,EAEVK,EACDN,GAOEgE,GAAiBvD,UAAOC,IAAV,mGACfJ,GAMC2D,GAAgBxD,UAAOC,IAAV,kKAEJT,EACXD,ERzBe,MQ6BFE,GAIxB4D,GAAc7C,YAAc,gBAC5B8C,GAAQ9C,YAAc,UACtB+C,GAAe/C,YAAc,iBAC7BgD,GAAchD,YAAc,gBCzCrB,IAAMiD,GAAkBzD,UAAO0D,GAAV,4GAKb,qBAAEnC,mBAA0C,UAAMzB,GAAY,KAK7E2D,GAAgBjD,YAAc,kB,4GCmBfmD,OA7Bf,YAS8B,IARAC,EAQD,EARCA,SACA7B,EAOD,EAPCA,UACAC,EAMD,EANCA,YAEAC,GAID,EALCpB,gBAKD,EAJCoB,UACAV,EAGD,EAHCA,mBACAD,EAED,EAFCA,UACGhB,EACJ,kBACnBkB,EAAMqC,iBAAO,MAEnB,OACI,cAAClD,EAAD,UACI,eAACI,EAAD,WACI,cAACG,EAAD,UAAY0C,IACZ,cAAC5C,EAAD,2BACQV,GADR,IAESyB,YAAWE,WAAUT,MAC1BY,KAAK,SACLJ,YAAaA,GAAe4B,EAC5BpB,SAAUjB,EACVI,MAAOP,EAAY,CAACE,YAAWC,qBAAoBC,iB,SCxB1DsC,GAAgBC,aAAY,CACrCC,KAAM,WACNC,aAAc,CACVC,MAAO,IAEXC,SAAU,CACNC,qBAAsB,SAACC,EAAOC,GAC1BD,EAAMH,MAAQI,EAAOC,SAEzBC,iBAAkB,SAACH,EAAOC,GACtBD,EAAMH,MAAQO,GAAWJ,EAAMH,MAAOI,EAAOC,aAKnDE,GAAa,SAACP,EAAOQ,GACvB,IAAO9B,EAAa8B,EAAb9B,GAAId,EAAS4C,EAAT5C,MACX,OAAOoC,EAAMS,KAAI,SAAAC,GAAE,OAAIA,EAAGhC,KAAOA,EAAV,2BACfgC,GADe,IACXC,WAAY/C,EAAOgD,YAAaF,EAAGG,gBAAkBjD,EAAOkD,KAAgB,KAAVlD,IADvD,eAEf8C,OAGL,GAAmDd,GAAcmB,QAAzDb,GAAR,GAAQA,qBAAsBI,GAA9B,GAA8BA,iBAEtBV,MAAf,Q,qCCIeoB,OAvBf,YAA6D,IAAzCtC,EAAwC,EAAxCA,GAAIiC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,YAAgBxE,EAAQ,kBAClD6E,EAAWC,cACTC,EAAMC,cAAND,EAMR,OACI,eAACnC,GAAD,WACI,eAACE,GAAD,WAAcR,EAAK,EAAnB,OACA,cAAC,GAAD,2BAAsBtC,GAAtB,IACkBwB,MAAO+C,EACPvD,UAAWwD,EACX9C,YAAaqD,EAAE,kBACf1D,MAAO,CAAC4D,WAAY,QACpB1E,iBAAe,EACfoB,SAbA,SAACuD,GACvBL,EAASX,GAAiB,CAAC5B,KAAId,MAAO0D,EAAEC,OAAO3D,iBCKxC4D,I,GAAAA,GAbf,YAAiD,IAA7BxB,EAA4B,EAA5BA,MAAO3C,EAAqB,EAArBA,mBACvB,OAAK2C,EAGD,cAACT,GAAD,CAAsBlC,qBAAtB,SACK2C,EAAMS,KAAI,SAACgB,GACR,IAAO/C,EAAoD+C,EAApD/C,GAAIgD,EAAgDD,EAAhDC,KAAMb,EAA0CY,EAA1CZ,cAAeF,EAA2Bc,EAA3Bd,WAAYC,EAAea,EAAfb,YAC5C,OAAO,cAAC,GAAD,CAAmBlB,SAAUgC,EAAWrE,qBAAoBqB,KAAImC,gBAAeF,aAAYC,eAA5ElC,QANf,MCDViD,GAAgB7F,UAAO8F,GAAV,qLACfvG,EACEO,GAUb+F,GAAcrF,YAAc,gBCR5B,IAIeuF,GAJiB,SAAC,GAA8B,IAAD,IAA5BlE,aAA4B,MAApB,GAAoB,MAAhBC,aAAgB,MAAR,GAAQ,EAC1D,OAAO,eAAC+D,GAAD,WAAgBhE,EAAhB,KAAyBC,MCThCkE,GAAaC,EAAQ,IAqCVC,OAnCf,YAGI,IAH+G,IAA5FC,EAA2F,EAA3FA,aAAcC,EAA6E,EAA7EA,cAAeC,EAA8D,EAA9DA,mBAAoBC,EAA0C,EAA1CA,oBAAqBC,EAAqB,EAArBA,kBACnFC,EAAa,GAD2F,WAGrGC,GAGL,IAFA,IAAMC,EAAc,GAEXC,EAAI,EAAGA,EAAIP,EAAeO,IAAK,CACpC,IAAMC,EAASC,KAAKC,MAAMD,KAAKE,SAAWV,EAAqB,GAC/DK,EAAYM,KAAKJ,GAGjBL,GACAG,EAAYO,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAID,KAGlC,IAAME,EAAYV,EAAY/B,KAAI,SAACiC,EAAQS,GACvC,IAAMC,EAAqBhB,EAAoBO,KAAKC,MAAMD,KAAKE,SAAWT,EAAoBiB,UAAY,IAC1G,MAAM,GAAN,OAAUX,EAAV,YAAoBS,IAAUX,EAAYa,OAAS,EAAI,GAAnC,UAA2CD,EAA3C,SACrBE,KAAK,IAEF7B,EAAU,CACZ/C,GAAI6D,EACJb,KAAMwB,EACNrC,cAAe0C,OAAOzB,GAAWoB,IACjCvC,WAAY,GACZG,MAAM,EACNF,aAAa,GAGjB0B,EAAWQ,KAAKrB,IA1BXc,EAAI,EAAGA,EAAIN,EAAcM,IAAM,EAA/BA,GA6BT,OAAOD,GCpBIkB,GAdY,SAACC,GACxB,IAAMC,EAAcD,EAAWJ,OACzBvC,EAAO2C,EAAWE,QAAO,SAAAjD,GAAE,OAAIA,EAAGI,QAAMuC,OACxCO,EAAgBH,EAAWE,QAAO,SAAAjD,GAAE,OAAIA,EAAGE,eAAayC,OAE9D,MAAO,CACHvC,KAAK,GAAD,QAAMA,EAAO4C,EAAc,KAAKG,QAAQ,GAAxC,cAAgD/C,EAAhD,YAAwD4C,EAAxD,KACJ9C,YAAY,GAAD,QAAMgD,EAAgBF,EAAc,KAAKG,QAAQ,GAAjD,cAAyDD,EAAzD,YAA0EF,EAA1E,KACXI,SAAS,GAAD,OAAKJ,EAAY5C,GACzBiD,YAAY,GAAD,OAAKL,EAAYE,GAC5BI,QAASlD,EAAO4C,EAAc,MAAQ,KAAM,IAAIO,MAAOC,UAAY,ICE5DC,I,GAAAA,GAZf,SAAkBC,GAChB,IAAIC,EAAU1B,KAAKC,MAAOwB,EAAW,IAAQ,IACzCE,EAAU3B,KAAKC,MAAOwB,EAAQ,IAAkB,IAChDG,EAAQ5B,KAAKC,MAAOwB,EAAQ,KAAuB,IAMxD,OAJAG,EAASA,EAAQ,GAAM,IAAMA,EAAQA,GAItB,KAHfD,EAAWA,EAAU,GAAM,IAAMA,EAAUA,GAGZ,KAF/BD,EAAWA,EAAU,GAAM,IAAMA,EAAUA,ICH/BG,GAAgC1I,UAAOC,IAAV,2EAC/BV,EAEEI,GAGb+I,GAA8BlI,YAAc,gCCqB7BmI,I,MAAAA,GArBf,WACI,IAAQtD,EAAMC,cAAND,EAEFuD,EAAaC,aAAY,qBAAED,aAA4BE,KACrDC,EAAyEH,EAAzEG,OAAQ/D,EAAiE4D,EAAjE5D,KAAMF,EAA2D8D,EAA3D9D,YAAakD,EAA8CY,EAA9CZ,SAAUC,EAAoCW,EAApCX,YAAae,EAAuBJ,EAAvBI,UAAWd,EAAYU,EAAZV,QAE/De,EAAeD,GAAad,EAElC,OACI,eAACQ,GAAD,WACI,gDACA,cAAC,GAAD,CAAQ7G,MAAOwD,EAAE,gBAAiBvD,MAAOiH,IACzC,cAAC,GAAD,CAAQlH,MAAOwD,EAAE,QAASvD,MAAOkD,IACjC,cAAC,GAAD,CAAQnD,MAAOwD,EAAE,iBAAkBvD,MAAOgD,IAC1C,cAAC,GAAD,CAAQjD,MAAOwD,EAAE,YAAavD,MAAOkG,IACrC,cAAC,GAAD,CAAQnG,MAAOwD,EAAE,mBAAoBvD,MAAOmG,IAC3CgB,EAAe,cAAC,GAAD,CAAQpH,MAAOwD,EAAE,YAAavD,MAAOuG,GAASH,EAAUc,KAAiB,SCxBxFE,GAAkBnF,aAAY,CACvCC,KAAM,aACNC,aAAc,CACV8E,OAAQ,EACR/D,KAAM,IACNF,YAAa,IACbkD,SAAU,IACVC,YAAa,IACbe,UAAW,EACXd,QAAS,GAEb/D,SAAU,CACNgF,aAAc,SAAA9E,GACVA,EAAM0E,OAAS1E,EAAM0E,OAAS,GAElCK,YAAa,SAAA/E,GACTA,EAAM0E,OAAS,GAEnBM,kBAAmB,SAAChF,EAAOC,GACvBD,EAAMS,YAAcR,EAAOC,QAAQO,YACnCT,EAAMW,KAAOV,EAAOC,QAAQS,KAC5BX,EAAM2D,SAAW1D,EAAOC,QAAQyD,SAChC3D,EAAM4D,YAAc3D,EAAOC,QAAQ0D,YACnC5D,EAAM6D,QAAU5D,EAAOC,QAAQ2D,SAEnCoB,gBAAiB,SAACjF,EAAOC,GACrBD,EAAM2E,UAAY1E,EAAOC,SAE7BgF,cAAe,SAAClF,EAAOC,GACnBD,EAAM6D,QAAU5D,EAAOC,YAM5B,GAAwF2E,GAAgBjE,QAAhGkE,GAAR,GAAQA,aAAcC,GAAtB,GAAsBA,YAAaC,GAAnC,GAAmCA,kBAAkBC,GAArD,GAAqDA,gBAAiBC,GAAtE,GAAsEA,cAE9DL,MAAf,QCpCaM,GAAgBxJ,UAAOC,IAAV,yFACJR,EACQA,GAGjBgK,GAAiBzJ,UAAOC,IAAV,8FAM3BuJ,GAAchJ,YAAc,gBAC5BiJ,GAAejJ,YAAc,iBCf7B,IAwBekJ,GAxBJ,CACPvD,aAAc,kBACdwD,yBAA0B,gCAC1BtD,mBAAoB,wBACpBuD,eAAgB,mCAChBC,SAAU,WACVC,YAAa,cACbC,eAAgB,iBAChBC,SAAU,WACVC,gBAAiB,mBACjBC,aAAc,gBACdC,UAAW,aACXC,SAAU,kBACVC,UAAW,cACXC,eAAgB,mBAChBC,eAAgB,oBAChBC,aAAc,mCACdxF,KAAM,OACNyF,cAAe,iBACfzC,SAAU,aACV0C,gBAAiB,qBACjBC,SAAU,aCGEC,GAxBJ,CACPzE,aAAc,kBACdwD,yBAA0B,qCAC1BtD,mBAAoB,uCACpBuD,eAAgB,6CAChBC,SAAU,YACVC,YAAa,cACbC,eAAgB,gBAChBC,SAAU,YACVC,gBAAiB,mDACjBC,aAAc,2BACdC,UAAW,oCACXC,SAAU,oCACVC,UAAW,iCACXC,eAAgB,sBAChBC,eAAgB,qBAChBC,aAAc,kCACdxF,KAAM,WACNyF,cAAe,qBACfzC,SAAU,8BACV0C,gBAAiB,aACjBC,SAAU,gBCRAE,OAVf,YAAgC,IAAfjG,EAAc,EAAdA,GAAIkG,EAAU,EAAVA,QACVhJ,EAAgB8C,EAAhB9C,MAAOpB,EAASkE,EAATlE,MAEd,OACI,cAAC8C,GAAD,CAAesH,QAAS,kBAAMA,EAAQhJ,EAAOpB,IAA7C,SACKA,KCcb,SAASqK,GAAT,GAAoD,IAAnC1J,EAAkC,EAAlCA,QAAgBQ,GAAkB,EAAzBF,MAAyB,EAAlBE,OAAOI,EAAW,EAAXA,SAC5BoD,EAAMC,cAAND,EAER,EAAwB2F,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,mBAAS3J,EAAQ8J,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAAS3K,OAAhF,mBAAO4K,EAAP,KAAmBC,EAAnB,KAMMC,EAAe,SAAC1J,EAAOpB,GACzBuB,EAASH,GACTyJ,EAAc7K,GACdwK,GAAQ,IAGZ,OACI,qCACKrJ,GAAS,cAAC,GAAD,CAAQA,MAAOwD,EAAExD,KAC3B,eAACwB,GAAD,WACI,cAACC,GAAD,CAASwH,QAdC,WAClBI,GAAQ,SAAAD,GAAI,OAAKA,MAaT,SAAiC,8BAAMK,MACtCL,GACG,cAAC1H,GAAD,CAAgBxB,UAAU,iBAA1B,SACKV,EAAQsD,KAAI,SAAAC,GAAE,OAAI,cAAC,GAAD,CAA4BA,KAAKkG,QAASU,GAA7B5G,EAAG9C,kBA9B3DiJ,GAAO1I,aAAe,CAClBhB,QAAS,GACTM,MAAO,GACPE,MAAO,GACPI,SAAU,cAsCC8I,UCzDFU,GAAkB,CAC3B,CACI3J,MAAO,KACPpB,MAAO,UACP2K,SAAS,GAEb,CACIvJ,MAAO,KACPpB,MAAO,WCqBfgL,IAAKC,IAAIC,KAAkBC,KAAK,CAC5BC,UAAW,CACPpC,GAAI,CAACqC,YAAarC,IAClBkB,GAAI,CAACmB,YAAanB,KAEtBoB,IAAK,KACLC,YAAa,KACbC,cAAe,CAAEC,aAAa,KA8HnBC,OA3Hf,WACI,IAAMjH,EAAWC,cACTC,EAAMC,cAAND,EAEFgH,EAAWxD,aAAY,kBAAiB,CAAE3E,MAAnB,EAAEmI,SAAiCnI,SAAU4E,KAE1E,EAAwCkC,mBAAS,IAAjD,mBAAO7E,EAAP,KAAqBmG,EAArB,KACA,EAA0CtB,mBAAS,GAAnD,mBAAO5E,EAAP,KAAsBmG,EAAtB,KACA,EAAoDvB,mBAAS,IAA7D,mBAAO3E,EAAP,KAA2BmG,EAA3B,KACA,EAAsDxB,mBAAS,IAA/D,mBAAO1E,EAAP,KAA4BmG,EAA5B,KACA,EAAoDzB,oBAAS,GAA7D,mBAAOzJ,EAAP,KAA2BmL,EAA3B,KACA,EAAkD1B,oBAAS,GAA3D,mBAAOzE,EAAP,KAA0BoG,EAA1B,KAQMC,EAAgB,WAClB,IAAMC,EAAU3G,GAAY,CACxBC,eACAC,gBACAC,qBACAC,sBACAC,sBAEJpB,EAASf,GAAqByI,KA2B5BC,EAA2B,SAACtH,GAC9B,IAAMuH,EAAevH,EAAEC,OAAO3D,MAG9B,GAFkB0D,EAAEC,OAAOuH,QAGvBP,EAAuB,GAAD,mBAAKnG,GAAL,CAA0ByG,SAC7C,CACH,IAAME,EAAS3G,EAAoBuB,QAAO,SAAAjD,GAAE,OAAIA,IAAOmI,KACvDN,EAAuBQ,GAEN,MAAjBF,GAAsBJ,GAAqB,IASnD,OACG,cAAC,WAAD,CAAUO,SAAS,aAAnB,SACI,eAAC,IAAD,CAAKC,QAAS,GAAIC,QAAM,EAAxB,UACI,cAAC,GAAD,CAAQ/L,QAASoK,GAAiBxJ,SALhB,SAACH,GAAD,OAAW4J,IAAK2B,eAAevL,IAKiBD,MAAOwD,EAAE,oBAC3E,eAACoE,GAAD,CAAgB2D,QAAM,EAAtB,UACI,cAAC,GAAD,CAAQvL,MAAM,aACd,cAAC,GAAD,CAAYA,MAAOwD,EAAE,gBAAiBvD,MAAOqE,EAAclE,SAlE/C,SAACuD,GAAD,OAAO8G,EAAgB9G,EAAEC,OAAO3D,QAkE6CI,IAAK,MAC9F,cAAC,GAAD,CAAYL,MAAOwD,EAAE,4BAA6BvD,MAAOsE,EAAenE,SAjE3D,SAACuD,GAAD,OAAO+G,EAAiB/G,EAAEC,OAAO3D,QAiEyDI,IAAK,EAAGC,IAAK,IACpH,cAAC,GAAD,CAAYN,MAAOwD,EAAE,sBAAuBvD,MAAOuE,EACvCpE,SAjEM,SAACuD,GAAD,OAAOgH,EAAsBhH,EAAEC,OAAO3D,QAkE5CI,IAAK,SAErB,eAACuH,GAAD,CAAgB2D,QAAM,EAAtB,UACI,cAAC,GAAD,CAAQvL,MAAOwD,EAAE,oBACjB,cAAC,GAAD,CAAoBjD,KAAMiD,EAAE,YAAavD,MAAM,IAAIG,SAAU6K,IAC7D,cAAC,GAAD,CAAoB1K,KAAMiD,EAAE,eAAgBvD,MAAM,IAAIG,SAAU6K,IAChE,cAAC,GAAD,CAAoB1K,KAAMiD,EAAE,kBAAmBvD,MAAM,IAAIG,SAAU6K,IACnE,cAAC,GAAD,CAAoB1K,KAAMiD,EAAE,YAAavD,MAAM,IAAIG,SAAU6K,IAC7D,cAAC,GAAD,CAAoB1K,KAAMiD,EAAE,mBAAoBvD,MAAOyE,EAAmBtE,SAxBrD,kBAAM0K,GAAsBpG,IAwBgE/D,UAAW8D,EAAoBgH,SAAS,KAAMN,QAASzG,OAE5K,cAACkD,GAAD,UACI,cAAC,EAAD,CAAQ/I,MAAO2E,EAAE,gBACTkI,gBAAgB,SAChBzC,QAlEK,WACxB,OAAIuB,EAASnI,MAAMqD,QACAiG,OAAOC,QAAQ,2CAE5Bb,IACAzH,EAASiE,GAAY,IACrBjE,EAASmE,IAAgB,IAAInB,MAAOC,YACpCjD,EAASoE,GAAc,IACvBmD,GAAsB,IAEnB,OAETvH,EAASmE,IAAgB,IAAInB,MAAOC,YAC7BwE,UAyDA,cAACnD,GAAD,UACI,cAAC,GAAD,CAAgBlI,qBAAqB2C,MAAOmI,EAASnI,UAGzD,eAACsF,GAAD,WACKjI,GAAsB,cAAC,GAAD,IACvB,eAACxB,EAAD,WACI,cAAC,EAAD,CAAQW,MAA4B2E,EAArB9D,EAAuB,WAAgB,aAC9CgM,gBAAgB,SAChBzC,QA/DH,WACpB4B,GAAsB,SAAAnL,GAAkB,OAAKA,MACxCA,GAAsB8K,EAASnI,MAAMqD,SACtCpC,EAASgE,MACThE,EAASkE,GAAkB3B,GAAmB2E,EAASnI,aA6D5C,cAAC,EAAD,CACI4G,QA3CH,kBAAM0C,OAAOE,OAAO,CAACC,IAAK,EAAGC,SAAU,YA4CpClN,MAAO2E,EAAE,aACTkI,gBAAgB,uBC7I5BM,GAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QACxDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFPQ,GAAQC,aAAe,CAChCC,QAAS,CACLnC,SAAUvI,GACV8E,WAAYM,MCAduF,GAAYC,SAASC,eAAe,QAC7BC,qBAAWH,IACnBI,OACD,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAeR,SAAf,SACI,cAAC,GAAD,SAQZT,O","file":"static/js/main.cb938bdb.chunk.js","sourcesContent":["export const white = '#fff';\r\nexport const yellow = '#ffd400'\r\nexport const orange = '#FFA233';\r\nexport const green = '#00ff44';\r\nexport const darkGreen = '#006400';\r\nexport const darkerGreen = '#004800';\r\nexport const gray = '#A4A4A4';\r\nexport const black = '#000';\r\nexport const red = '#ff0000'\r\n","import { white } from \"../colors\";\r\n\r\nexport const paddingButton = '10px 30px';\r\nexport const paddingTopBottom = '3px 0';\r\n\r\nexport const borderWidth = '2px';\r\nexport const borderRadius = '4px';\r\nexport const border = `${borderWidth} ${white} solid`;\r\n\r\nexport const transition = '.5s';\r\nexport const outlineColor = `${white}`;\r\n\r\nexport const opacity = .5;\r\n\r\n// RWD\r\n\r\nexport const rwdExtraSmallDevices = 'max-width: 600px';\r\nexport const rwdSmallDevices = 'max-width: 600px';\r\nexport const rwdTablet = 'min-width: 768px';\r\nexport const rwdLargeDevices = 'min-width: 992px';\r\nexport const rwdExtraLargeDevices = 'min-width: 1200px';\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nimport { darkerGreen } from \"colors\";\r\nimport { border, borderRadius } from \"variables\";\r\n\r\nexport const GroupButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  background-color: ${darkerGreen};\r\n`;\r\n\r\nexport const pulseLight = keyframes`\r\n  0% {\r\n    background-image: linear-gradient(\r\n               to right,\r\n               transparent 33%,\r\n               rgba(255,255,255,0.4) 50%,\r\n               transparent 66%\r\n       );\r\n           background-size:300% 100%;\r\n\t  \r\n  }\r\n  100% {\r\n    background-position: right;\r\n    background-image: linear-gradient(\r\n            to right,\r\n            transparent 33%,\r\n            rgba(255,255,255,0.4) 50%,\r\n            transparent 66%\r\n    );\r\n    background-size:300% 100%;\r\n  }\r\n`;\r\n\r\n\r\nexport const GlassButtonWrapper = styled.button`\r\n  color: ${(props) => props.color ? props.color : '#fff'};\r\n  background-color: transparent;\r\n  font-weight: 400;\r\n  font-size: .7rem;\r\n  line-height: 1.8rem;\r\n  padding: .3rem 1.9rem;\r\n  flex: 1 1 auto;\r\n  display: inline-block;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  text-transform: uppercase;\r\n  box-sizing: border-box;\r\n  \r\n  border: ${border};\r\n  border-radius: ${borderRadius};\r\n  transition: 0.3s;\r\n  \r\n  &:hover {\r\n    animation-name: ${pulseLight};\r\n    animation-duration: 3s;\r\n    animation-iteration-count: infinite;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\n// .white {\r\n//     border: 2px solid #fff;\r\n//     border-radius: 3px;\r\n//     font-size: 1.8rem;\r\n//     text-transform: uppercase;\r\n//     color: #fff;\r\n//     line-height: 3.8rem;\r\n//     width: 100%;\r\n//     max-width: 320px;\r\n//     -webkit-transition: 0.3s;\r\n//     transition: 0.3s;\r\n// }\r\n\r\n// .white:hover {\r\n//     background-color: rgba(255, 255, 255, 0.2);\r\n// }\r\n\r\n// .pulse-light {\r\n//     background-image: linear-gradient(\r\n//         to right,\r\n//         transparent 33%,\r\n//         rgba(255,255,255,0.4) 50%,\r\n//         transparent 66%\r\n// );\r\n//     background-size:300% 100%;\r\n//     animation: shine 5s infinite;\r\n// }\r\n\r\n\r\n// .pulse-dark {\r\n//     background-image: linear-gradient(\r\n//         to right,\r\n//         transparent 33%,\r\n//         rgba(0,0,0,0.1) 50%,\r\n//         transparent 66%\r\n// );\r\n//     background-size:300% 100%;\r\n//     animation: shine 5s infinite;\r\n// }\r\n\r\nGroupButtonWrapper.displayName = \"GroupButtonWrapper\";\r\nGlassButtonWrapper.displayName = \"GlassButtonWrapper\";\r\n\r\n\r\n","import React from 'react';\r\nimport { GlassButtonWrapper } from \"./styles\";\r\n\r\nfunction Button({label, ...props}) {\r\n    return (\r\n        <GlassButtonWrapper {...props}>\r\n            {label}\r\n        </GlassButtonWrapper>\r\n    );\r\n}\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\nimport { border, borderRadius, opacity, paddingTopBottom } from \"variables\";\r\nimport { darkGreen, red, white } from \"colors\";\r\nimport { GlassButtonWrapper, pulseLight } from \"components/Button/styles\";\r\n\r\nexport const WrapperInputField = styled.div`\r\n  padding: ${paddingTopBottom};\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: ${({horizontalLabel}) => horizontalLabel ? 'row' : 'column'};\r\n  color: ${white};\r\n`;\r\n\r\nexport const LabelField = styled(Label)`\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const LabelResult = styled(Label)`\r\n  flex-direction: row;\r\n  align-items: center;\r\n  flex: 0 0 auto;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 5px;\r\n  outline: none;\r\n  background-color: ${darkGreen};\r\n  color: ${white};\r\n  border: ${border};\r\n  border-radius: ${borderRadius};\r\n  flex: 0 0 auto;\r\n\r\n  &:focus {\r\n    animation-name: ${pulseLight};\r\n    animation-duration: 3s;\r\n    animation-iteration-count: infinite;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n  }\r\n\r\n  &::placeholder {\r\n    color: ${white};\r\n    opacity: ${opacity};\r\n  }\r\n\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const LabelTask = styled.span`\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nexport const inputStyles = (options = {}) => {\r\n    const {isCorrect, isCheckTasksActive, ref} = options;\r\n\r\n    if (!ref.current) return {};\r\n\r\n    if (!isCheckTasksActive) {\r\n        return {\r\n            borderColor: ref.current.style.borderColor,\r\n        }\r\n    }\r\n\r\n    return {\r\n        borderColor: `${isCorrect ? white : red}`\r\n    }\r\n};\r\n\r\nWrapperInputField.displayName = \"WrapperInputField\"\r\nLabel.displayName = \"Label\"\r\nLabelField.displayName = \"LabelField\"\r\nLabelResult.displayName = \"LabelResult\"\r\nInput.displayName = \"Input\"\r\nLabelTask.displayName = \"LabelTask\"\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Input, LabelField, WrapperInputField } from './styles';\r\n\r\nInputField.propTypes = {\r\n    max: PropTypes.number,\r\n    min: PropTypes.number,\r\n};\r\n\r\nInputField.defaultProps = {\r\n    max: 5,\r\n    min: 1,\r\n};\r\n\r\nfunction InputField({title, value, className, placeholder, horizontalLabel, onChange, max, min, ...props}) {\r\n    return (\r\n        <WrapperInputField>\r\n            <LabelField {...{horizontalLabel}}>{title}\r\n                <Input\r\n                    {...props}\r\n                    {...{value, className, onChange, max, min}}\r\n                    type=\"number\"\r\n                    placeholder={placeholder || title}\r\n                />\r\n            </LabelField>\r\n        </WrapperInputField>\r\n    );\r\n}\r\n\r\nexport default InputField;","import styled from 'styled-components';\r\n\r\nimport { white } from 'colors';\r\nimport { border, borderRadius, borderWidth, transition, opacity } from \"variables\";\r\nimport { pulseLight } from \"components/Button/styles\";\r\nimport { LabelTask } from \"../InputField/styles\";\r\n\r\nexport const WrapperInputMathOperators = styled.div`\r\n  border: ${borderWidth} solid transparent;\r\n  border-radius: ${borderRadius};\r\n  transition: ${transition};\r\n  \r\n  &:hover {\r\n    border: ${border};\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  padding: 0 5px ;\r\n  color: ${white};\r\n\r\n  &:hover {\r\n    animation-name: ${pulseLight};\r\n    animation-duration: 3s;\r\n    animation-iteration-count: infinite;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n\r\nexport const disabledStyles = (options = {}) => {\r\n    const { disabled } = options;\r\n    return {\r\n        cursor: disabled && 'not-allowed',\r\n        opacity: disabled && `${opacity}`,\r\n    }\r\n}\r\n\r\nWrapperInputMathOperators.displayName = \"WrapperInputMathOperators\";\r\nLabel.displayName = \"Label\";\r\nInput.displayName = \"Input\";\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Input, Label, WrapperInputMathOperators, disabledStyles } from './styles'\r\n\r\nInputMathOperators.prototype = {\r\n    type: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nInputMathOperators.defaultProps = {\r\n    type: undefined,\r\n    disabled: false,\r\n}\r\n\r\nfunction InputMathOperators({type, disabled, ...props}) {\r\n\r\n    return (\r\n        <WrapperInputMathOperators>\r\n            <Label htmlFor={type} style={disabledStyles({disabled})}>\r\n                {type}\r\n                <Input {...props}\r\n                    {...{disabled}}\r\n                       type=\"checkbox\"\r\n                       id={type}\r\n                       style={disabledStyles({disabled})}\r\n                />\r\n            </Label>\r\n        </WrapperInputMathOperators>\r\n    );\r\n}\r\n\r\nexport default InputMathOperators;","import styled from \"styled-components\";\r\nimport { white } from \"colors\";\r\nimport { opacity } from \"variables\";\r\n\r\nexport const LiWrapper = styled.li`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  align-items: center;\r\n  flex: 1 1 auto;\r\n`;\r\n\r\nexport const CounterItem = styled.span`\r\n  color: ${white};\r\n  opacity: ${opacity};\r\n`;\r\n\r\nLiWrapper.displayName = 'LiWrapper';\r\nCounterItem.displayName = 'CounterItem';\r\n\r\n","import styled from \"styled-components\";\r\nimport { darkerGreen, darkGreen, white } from \"colors\";\r\nimport { border, transition } from \"variables\";\r\nimport { CounterItem } from \"../ListItem/styles\";\r\n\r\nexport const SelectWrapper = styled.div`\r\n  position: relative;\r\n  z-index: 2;\r\n  width: 150px;\r\n  box-sizing: content-box;\r\n`;\r\n\r\nexport const Trigger = styled.div`\r\n  width: 100%;\r\n  background-color: ${darkGreen};\r\n  height: 30px;\r\n  border: ${border};\r\n  color: ${white};\r\n  \r\n  div {\r\n    padding: 5px 10px;\r\n  }\r\n`;\r\n\r\nexport const OptionsWrapper = styled.div`\r\n  border: ${border};\r\n  position: absolute;\r\n  top: 32px;\r\n  width: 150px;\r\n`;\r\n\r\nexport const OptionWrapper = styled.div`\r\n  padding: 5px 10px;\r\n  background-color: ${darkGreen};\r\n  color: ${white};\r\n  transition: ${transition};\r\n  \r\n  &:hover {\r\n    background-color: ${darkerGreen};\r\n  }\r\n`;\r\n\r\nSelectWrapper.displayName = 'SelectWrapper';\r\nTrigger.displayName = 'Trigger';\r\nOptionsWrapper.displayName = 'OptionsWrapper';\r\nOptionWrapper.displayName = 'OptionWrapper';\r\n","import styled from 'styled-components';\r\nimport { opacity } from \"variables\";\r\nimport { SelectWrapper } from \"../Select/styles\";\r\n\r\nexport const TaskListWrapper = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n\r\n  li input {\r\n    opacity: ${({isCheckTasksActive}) => isCheckTasksActive ? `${opacity}` : 1};\r\n  }\r\n}\r\n`;\r\n\r\nTaskListWrapper.displayName = 'TaskListWrapper';\r\n\r\n","import React, { useRef } from 'react';\r\n\r\nimport { Input, LabelResult, WrapperInputField, LabelTask, inputStyles } from './styles';\r\n\r\nfunction InputFieldResult({\r\n                              taskToDo,\r\n                              className,\r\n                              placeholder,\r\n                              horizontalLabel,\r\n                              onChange,\r\n                              isCheckTasksActive,\r\n                              isCorrect,\r\n                              ...props\r\n                          }) {\r\n    const ref = useRef(null);\r\n\r\n    return (\r\n        <WrapperInputField>\r\n            <LabelResult>\r\n                <LabelTask>{taskToDo}</LabelTask>\r\n                <Input\r\n                    {...props}\r\n                    {...{className, onChange, ref}}\r\n                    type=\"number\"\r\n                    placeholder={placeholder || taskToDo}\r\n                    disabled={isCheckTasksActive}\r\n                    style={inputStyles({isCorrect, isCheckTasksActive, ref})}\r\n                />\r\n            </LabelResult>\r\n        </WrapperInputField>\r\n    );\r\n}\r\n\r\nexport default InputFieldResult;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const taskListSlice = createSlice({\r\n    name: 'taskList',\r\n    initialState: {\r\n        tasks: [],\r\n    },\r\n    reducers: {\r\n        generateTasksReducer: (state, action) => {\r\n            state.tasks = action.payload\r\n        },\r\n        updateUserAnswer: (state, action) => {\r\n            state.tasks = updateTask(state.tasks, action.payload);\r\n        }\r\n    }\r\n});\r\n\r\nconst updateTask = (tasks, actionPayload) => {\r\n    const {id, value} = actionPayload;\r\n    return tasks.map(el => el.id === id ?\r\n        {...el, userAnswer: value, correctDone: el.correctResult === value, done: value !== ''} :\r\n        {...el})\r\n}\r\n\r\nexport const { generateTasksReducer, updateUserAnswer } = taskListSlice.actions;\r\n\r\nexport default taskListSlice.reducer","import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport InputFieldResult from \"components/InputField/InputFieldResult\";\r\nimport { CounterItem, LiWrapper } from \"./styles\";\r\nimport { updateUserAnswer } from 'components/TasksList/taskListSlice'\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nfunction ListItem({ id, userAnswer, correctDone, ...props}) {\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const handleValueChange = (e) => {\r\n        dispatch(updateUserAnswer({id, value: e.target.value}))\r\n    }\r\n\r\n    return (\r\n        <LiWrapper>\r\n            <CounterItem>{id + 1}.</CounterItem>\r\n            <InputFieldResult {...props}\r\n                              value={userAnswer}\r\n                              isCorrect={correctDone}\r\n                              placeholder={t('enterTheResult')}\r\n                              style={{marginLeft: '10px'}}\r\n                              horizontalLabel\r\n                              onChange={handleValueChange}\r\n            />\r\n        </LiWrapper>\r\n    );\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport { TaskListWrapper } from \"./styles\";\r\nimport ListItem from 'components/ListItem/ListItem';\r\n\r\nfunction TasksList({tasks, isCheckTasksActive}) {\r\n    if (!tasks) return null;\r\n\r\n    return (\r\n        <TaskListWrapper {...{isCheckTasksActive}}>\r\n            {tasks.map((taskObj) => {\r\n                const {id, task, correctResult, userAnswer, correctDone} = taskObj;\r\n                return <ListItem key={id} taskToDo={task} {...{isCheckTasksActive, id, correctResult, userAnswer, correctDone}} />\r\n            })}\r\n        </TaskListWrapper>\r\n    );\r\n}\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\nimport { white } from \"colors\";\r\nimport { opacity } from 'variables';\r\n\r\nexport const HeaderWrapper = styled.h4`\r\n  color: ${white};\r\n  opacity: ${opacity};\r\n  margin: 0;\r\n  font-weight: 400;\r\n  margin-bottom: 2px;\r\n  \r\n  &:first-letter {\r\n    text-transform: capitalize;\r\n  }\r\n`;\r\n\r\nHeaderWrapper.displayName = 'HeaderWrapper';\r\n","import React from 'react';\r\nimport { HeaderWrapper } from \"./styles\";\r\n\r\ntype Props = {\r\n    title: string,\r\n    value: any,\r\n}\r\n\r\nconst Header: React.FC<Props> = ({title = '', value = ''}) => {\r\n    return <HeaderWrapper>{title}: {value}</HeaderWrapper>;\r\n}\r\n\r\nexport default Header;","var stringMath = require('string-math');\r\n\r\nfunction createTasks({ howManyTasks, howManyValues, maximumSingleValue, typeOfMathOperators, isPositiveResults }) {\r\n    const arrOfTasks = [];\r\n\r\n    for (let i = 0; i < howManyTasks; i++) {\r\n        const numberValue = [];\r\n\r\n        for (let j = 0; j < howManyValues; j++) {\r\n            const number = Math.floor(Math.random() * maximumSingleValue + 1);\r\n            numberValue.push(number);\r\n        }\r\n\r\n        if (isPositiveResults) {\r\n            numberValue.sort((a,b) => b - a);\r\n        }\r\n\r\n        const matchTask = numberValue.map((number, index) => {\r\n            const randomMathOperator = typeOfMathOperators[Math.floor(Math.random() * typeOfMathOperators.length)] || '+';\r\n            return `${number} ${index === numberValue.length - 1 ? '' : `${randomMathOperator} `}`\r\n        }).join('')\r\n\r\n        const taskObj = {\r\n            id: i,\r\n            task: matchTask,\r\n            correctResult: String(stringMath(matchTask)),\r\n            userAnswer: '',\r\n            done: false,\r\n            correctDone: false,\r\n        }\r\n\r\n        arrOfTasks.push(taskObj);\r\n    }\r\n\r\n    return arrOfTasks;\r\n}\r\n\r\nexport default createTasks;\r\n\r\n","const calculateDoneTasks = (tasksArray) => {\r\n    const tasksLength = tasksArray.length;\r\n    const done = tasksArray.filter(el => el.done).length;\r\n    const correctAnswer = tasksArray.filter(el => el.correctDone).length;\r\n\r\n    return {\r\n        done: `${(done / tasksLength * 100).toFixed(2)}% (${done}/${tasksLength})`,\r\n        correctDone: `${(correctAnswer / tasksLength * 100).toFixed(2)}% (${correctAnswer}/${tasksLength})`,\r\n        leftToDo: `${tasksLength-done}`,\r\n        correctToDo: `${tasksLength-correctAnswer}`,\r\n        endTime: done / tasksLength * 100 === 100 ? new Date().getTime() : 0,\r\n    };\r\n}\r\n\r\nexport default calculateDoneTasks;","function msToTime(duration) {\r\n\t\tlet\tseconds = Math.floor((duration / 1000) % 60);\r\n\t\tlet\tminutes = Math.floor((duration / (1000 * 60)) % 60);\r\n\t\tlet hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n\r\n\thours = (hours < 10) ? \"0\" + hours : hours;\r\n\tminutes = (minutes < 10) ? \"0\" + minutes : minutes;\r\n\tseconds = (seconds < 10) ? \"0\" + seconds : seconds;\r\n\r\n\treturn hours + \":\" + minutes + \":\" + seconds;\r\n}\r\n\r\nexport default msToTime;","import styled from \"styled-components\";\r\nimport { white } from 'colors'\r\nimport { paddingTopBottom } from \"variables\";\r\n\r\nexport const InformationAboutResultWrapper = styled.div`\r\n  color: ${white};\r\n  margin: 0;\r\n  padding: ${paddingTopBottom};\r\n`;\r\n\r\nInformationAboutResultWrapper.displayName = 'InformationAboutResultWrapper';\r\n","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport isEqual from \"lodash.isequal\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport Header from \"components/Header/Header\";\r\nimport { msToTime } from \"utils\";\r\nimport { InformationAboutResultWrapper } from \"./style\";\r\n\r\n\r\nfunction Statistics() {\r\n    const { t } = useTranslation();\r\n\r\n    const statistics = useSelector(({statistics}) => statistics, isEqual);\r\n    const { checks, done, correctDone, leftToDo, correctToDo, startTime, endTime } = statistics;\r\n\r\n    const isTaskFinish = startTime && endTime;\r\n\r\n    return (\r\n        <InformationAboutResultWrapper>\r\n            <p>Your result is:</p>\r\n            <Header title={t('checkCounter')} value={checks} />\r\n            <Header title={t('done')} value={done} />\r\n            <Header title={t('correctlyDone')} value={correctDone} />\r\n            <Header title={t('leftToDo')} value={leftToDo} />\r\n            <Header title={t('correctLeftToDo')} value={correctToDo} />\r\n            {isTaskFinish ? <Header title={t('yourTime')} value={msToTime(endTime - startTime)} /> : null}\r\n        </InformationAboutResultWrapper>\r\n    );\r\n}\r\n\r\nexport default Statistics;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const statisticsSlice = createSlice({\r\n    name: 'statistics',\r\n    initialState: {\r\n        checks: 0,\r\n        done: '0',\r\n        correctDone: '0',\r\n        leftToDo: '0',\r\n        correctToDo: '0',\r\n        startTime: 0,\r\n        endTime: 0,\r\n    },\r\n    reducers: {\r\n        updateChecks: state => {\r\n            state.checks = state.checks + 1;\r\n        },\r\n        resetChecks: state => {\r\n            state.checks = 0;\r\n        },\r\n        updateCorrectDone: (state, action) => {\r\n            state.correctDone = action.payload.correctDone;\r\n            state.done = action.payload.done;\r\n            state.leftToDo = action.payload.leftToDo;\r\n            state.correctToDo = action.payload.correctToDo;\r\n            state.endTime = action.payload.endTime;\r\n        },\r\n        updateStartTime: (state, action) => {\r\n            state.startTime = action.payload;\r\n        },\r\n        updateEndTime: (state, action) => {\r\n            state.endTime = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const { updateChecks, resetChecks, updateCorrectDone,updateStartTime, updateEndTime } = statisticsSlice.actions;\r\n\r\nexport default statisticsSlice.reducer","import styled from \"styled-components\";\r\nimport {darkerGreen} from \"colors\";\r\n\r\nexport const BottomSection = styled.div`\r\n  background-color: ${darkerGreen};\r\n  box-shadow: 0 0 20px 17px ${darkerGreen};\r\n`;\r\n\r\nexport const SectionWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 10px 0;\r\n`;\r\n\r\nBottomSection.displayName = \"BottomSection\";\r\nSectionWrapper.displayName = \"SectionWrapper\";","const en = {\r\n    howManyTasks: 'How many tasks?',\r\n    howManyValuesToCalculate: 'How many values to calculate?',\r\n    maximumSingleValue: \"Maximum single value?\",\r\n    typeOperations: \"type of mathematical operations:\",\r\n    addition: \"addition\",\r\n    subtraction: \"subtraction\",\r\n    multiplication: \"multiplication\",\r\n    division: \"division\",\r\n    positiveResults: \"positive results\",\r\n    generateTask: \"generate task\",\r\n    checkTask: \"check task\",\r\n    editTask: \"go to edit task\",\r\n    backToTop: \"back to top\",\r\n    enterTheResult: \"Enter the result\",\r\n    chooseLanguage: \"Choose a language\",\r\n    checkCounter: \"How mamy time do You check task?\",\r\n    done: \"Done\",\r\n    correctlyDone: 'Correctly done',\r\n    leftToDo: \"Left to do\",\r\n    correctLeftToDo: \"Correct left to do\",\r\n    yourTime: \"Your time\",\r\n}\r\n\r\nexport default en;"," const pl = {\r\n     howManyTasks: 'Ile zadań?',\r\n     howManyValuesToCalculate: 'Ile liczb w jednym działaniu?',\r\n     maximumSingleValue: \"Największa dostępna cyfra?\",\r\n     typeOperations: \"dostępne działania matematyczne:\",\r\n     addition: \"dodawanie\",\r\n     subtraction: \"odejmowanie\",\r\n     multiplication: \"mnożenie\",\r\n     division: \"dzielenie\",\r\n     positiveResults: \"wyniki większe bądź równe zero\",\r\n     generateTask: \"stwórz działania\",\r\n     checkTask: \"sprawdź poprawność\",\r\n     editTask: \"wróć do edycji zadań\",\r\n     backToTop: \"wróć na góre strony\",\r\n     enterTheResult: \"Wprowadź wynik\",\r\n     chooseLanguage: \"wybierz język\",\r\n     checkCounter: \"Ilość sprawdzeń?\",\r\n     done: \"Wykonane\",\r\n     correctlyDone: 'Wykonane poprawnie',\r\n     leftToDo: \"Pozostałe do zrobienia\",\r\n     correctLeftToDo: \"Do poprawy\",\r\n     yourTime: \"Twój czas\",\r\n}\r\n\r\n export default pl;","import React from 'react';\r\nimport { OptionWrapper } from \"./styles\";\r\n\r\nfunction Option({el, onClick}) {\r\n    const {value, label} = el;\r\n\r\n    return (\r\n        <OptionWrapper onClick={() => onClick(value, label)}>\r\n            {label}\r\n        </OptionWrapper>\r\n    );\r\n}\r\n\r\nexport default Option;","import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport Header from \"components/Header/Header\";\r\nimport Option from \"./Option\";\r\nimport { OptionsWrapper, SelectWrapper, Trigger } from \"./styles\";\r\n\r\nSelect.propTypes = {\r\n    options: PropTypes.array,\r\n    style: PropTypes.object,\r\n    title: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n}\r\n\r\nSelect.defaultProps = {\r\n    options: [],\r\n    style: {},\r\n    title: '',\r\n    onChange: () => {},\r\n}\r\n\r\nfunction Select({options, style, title, onChange}) {\r\n    const { t } = useTranslation();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [userChoice, setUserChoice] = useState(options.find(lang => lang.default).label);\r\n\r\n    const handleTrigger = () => {\r\n        setOpen(open => !open)\r\n    }\r\n\r\n    const handleOption = (value, label) => {\r\n        onChange(value);\r\n        setUserChoice(label);\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {title && <Header title={t(title)} />}\r\n            <SelectWrapper>\r\n                <Trigger onClick={handleTrigger}><div>{userChoice}</div></Trigger>\r\n                {open && (\r\n                    <OptionsWrapper className=\"OptionsWrapper\">\r\n                        {options.map(el => <Option key={el.value} {...{el}} onClick={handleOption} />)}\r\n                    </OptionsWrapper>\r\n                    )}\r\n\r\n            </SelectWrapper>\r\n        </>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Select;","export const languageOptions = [\r\n    {\r\n        value: 'en',\r\n        label: 'English',\r\n        default: true,\r\n    },\r\n    {\r\n        value: 'pl',\r\n        label: 'Polski',\r\n    },\r\n]","import { Suspense, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Div from 'styled-kit/Div';\r\nimport isEqual from 'lodash.isequal';\r\nimport i18n from 'i18next'\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport 'App.css';\r\nimport Button from \"components/Button/Button\";\r\nimport InputField from \"components/InputField/InputField\";\r\nimport InputMathOperators from \"components/InputMathOperators/InputMathOperators\";\r\nimport { GroupButtonWrapper } from \"components/Button/styles\";\r\nimport TasksList from \"components/TasksList/TasksList\";\r\nimport Header from \"components/Header/Header\";\r\nimport { createTasks, calculateDoneTasks } from \"utils\";\r\nimport Statistics from \"components/Statistics/Statistics\";\r\nimport { generateTasksReducer } from \"components/TasksList/taskListSlice\";\r\nimport {\r\n    updateChecks,\r\n    resetChecks,\r\n    updateCorrectDone,\r\n    updateStartTime, updateEndTime,\r\n} from \"components/Statistics/statisticsSlice\";\r\nimport { BottomSection, SectionWrapper } from \"styles\";\r\nimport { en, pl } from 'translations';\r\nimport Select from \"components/Select/Select\";\r\nimport { languageOptions } from \"translations/options\";\r\n\r\ni18n.use(initReactI18next).init({\r\n    resources: {\r\n        en: {translation: en},\r\n        pl: {translation: pl},\r\n    },\r\n    lng: 'en',\r\n    fallbackLng: 'en',\r\n    interpolation: { escapeValue: false },\r\n})\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const taskList = useSelector(({taskList}) => ({ tasks: taskList.tasks }), isEqual);\r\n\r\n    const [howManyTasks, setHowManyTasks] = useState(30);\r\n    const [howManyValues, setHowManyValues] = useState(2);\r\n    const [maximumSingleValue, setMaximumSingleValue] = useState(30);\r\n    const [typeOfMathOperators, setTypeOfMathOperators] = useState([]);\r\n    const [isCheckTasksActive, setIsCheckTasksActive] = useState(false);\r\n    const [isPositiveResults, setIsPositiveResults] = useState(false);\r\n\r\n    const handleHowManyTasks = (e) => setHowManyTasks(e.target.value);\r\n\r\n    const handleHowManyValues = (e) => setHowManyValues(e.target.value);\r\n\r\n    const handleMaximumSingleValue = (e) => setMaximumSingleValue(e.target.value);\r\n\r\n    const generateTasks = () => {\r\n        const newTask = createTasks({\r\n            howManyTasks,\r\n            howManyValues,\r\n            maximumSingleValue,\r\n            typeOfMathOperators,\r\n            isPositiveResults,\r\n        })\r\n        dispatch(generateTasksReducer(newTask));\r\n    }\r\n\r\n    const handleGenerateTasks = () => {\r\n        if (taskList.tasks.length) {\r\n            const answer = window.confirm(\"Got a list, want to create a new one?\");\r\n          if (answer) {\r\n              generateTasks();\r\n              dispatch(resetChecks(0));\r\n              dispatch(updateStartTime(new Date().getTime()));\r\n              dispatch(updateEndTime(0));\r\n              setIsCheckTasksActive(false);\r\n          }\r\n          return null;\r\n        }\r\n        dispatch(updateStartTime(new Date().getTime()));\r\n        return generateTasks();\r\n    };\r\n\r\n    const handleCheckTask = () => {\r\n        setIsCheckTasksActive(isCheckTasksActive => !isCheckTasksActive);\r\n        if (!isCheckTasksActive && taskList.tasks.length) {\r\n            dispatch(updateChecks());\r\n            dispatch(updateCorrectDone(calculateDoneTasks(taskList.tasks)));\r\n        }\r\n    };\r\n\r\n    const handleMathOperatorChange = (e) => {\r\n        const mathOperator = e.target.value;\r\n        const isChecked = e.target.checked;\r\n\r\n        if (isChecked) {\r\n            setTypeOfMathOperators([...typeOfMathOperators, mathOperator])\r\n        } else {\r\n            const newArr = typeOfMathOperators.filter(el => el !== mathOperator)\r\n            setTypeOfMathOperators(newArr);\r\n        }\r\n        if (mathOperator === '-') setIsPositiveResults(false);\r\n    }\r\n\r\n    const handlePositiveResultsChange = () => setIsPositiveResults(!isPositiveResults);\r\n\r\n    const goBackToTop = () => window.scroll({top: 0, behavior: 'smooth'});\r\n\r\n    const handleChangeLanguage = (value) => i18n.changeLanguage(value);\r\n\r\n    return (\r\n       <Suspense fallback=\"Loading...\">\r\n           <Div padding={20} column>\r\n               <Select options={languageOptions} onChange={handleChangeLanguage} title={t('chooseLanguage')} />\r\n               <SectionWrapper column>\r\n                   <Header title=\"Settings\"/>\r\n                   <InputField title={t('howManyTasks')} value={howManyTasks} onChange={handleHowManyTasks} max={100} />\r\n                   <InputField title={t('howManyValuesToCalculate')} value={howManyValues} onChange={handleHowManyValues} max={5} min={2}/>\r\n                   <InputField title={t('maximumSingleValue')} value={maximumSingleValue}\r\n                               onChange={handleMaximumSingleValue}\r\n                               max={10000}/>\r\n               </SectionWrapper>\r\n               <SectionWrapper column>\r\n                   <Header title={t('typeOperations')}/>\r\n                   <InputMathOperators type={t('addition')} value='+' onChange={handleMathOperatorChange}/>\r\n                   <InputMathOperators type={t('subtraction')} value='-' onChange={handleMathOperatorChange}/>\r\n                   <InputMathOperators type={t('multiplication')} value='*' onChange={handleMathOperatorChange}/>\r\n                   <InputMathOperators type={t('division')} value='/' onChange={handleMathOperatorChange}/>\r\n                   <InputMathOperators type={t('positiveResults')} value={isPositiveResults} onChange={handlePositiveResultsChange} disabled={!typeOfMathOperators.includes('-')} checked={isPositiveResults} />\r\n               </SectionWrapper>\r\n               <SectionWrapper>\r\n                   <Button label={t('generateTask')}\r\n                           backgroundColor='silver'\r\n                           onClick={handleGenerateTasks}\r\n                   />\r\n               </SectionWrapper>\r\n\r\n               <SectionWrapper>\r\n                   <TasksList {...{isCheckTasksActive}} tasks={taskList.tasks} />\r\n               </SectionWrapper>\r\n\r\n               <BottomSection>\r\n                   {isCheckTasksActive && <Statistics />}\r\n                   <GroupButtonWrapper >\r\n                       <Button label={isCheckTasksActive ? t('editTask') : t('checkTask')}\r\n                               backgroundColor='silver'\r\n                               onClick={handleCheckTask}\r\n                       />\r\n                       <Button\r\n                           onClick={goBackToTop}\r\n                           label={t('backToTop')}\r\n                           backgroundColor='silver'\r\n                       />\r\n                   </GroupButtonWrapper>\r\n               </BottomSection>\r\n           </Div>\r\n       </Suspense>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport taskListSlice from \"components/TasksList/taskListSlice\";\r\nimport statisticsSlice from \"components/Statistics/statisticsSlice\";\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        taskList: taskListSlice,\r\n        statistics: statisticsSlice,\r\n    }\r\n})\r\n","import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport 'index.css';\r\nimport App from 'App';\r\nimport reportWebVitals from 'reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container);\r\nroot.render(\r\n    <React.StrictMode>\r\n        <Provider {...{store}}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}