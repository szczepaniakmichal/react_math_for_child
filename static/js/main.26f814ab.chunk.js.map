{"version":3,"sources":["colors/index.js","variables/index.js","components/Button/styles.js","components/Button/Button.js","components/InputField/styles.js","components/InputField/InputField.js","components/InputMathOperators/styles.js","components/InputMathOperators/InputMathOperators.js","components/TasksList/styles.js","components/InputField/InputFieldResult.js","components/ListItem/styles.js","components/TasksList/taskListSlice.js","components/ListItem/ListItem.js","components/TasksList/TasksList.js","components/Header/styles.js","components/Header/Header.js","utils/createTasks.js","utils/calculateDoneTasks.js","components/Statistics/style.js","components/Statistics/Statistics.js","components/Statistics/statisticsSlice.js","styles.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["white","darkGreen","red","paddingTopBottom","borderRadius","border","opacity","GroupButtonWrapper","styled","div","pulseLight","keyframes","GlassButtonWrapper","button","props","color","Button","label","WrapperInputField","Label","horizontalLabel","LabelField","LabelResult","Input","input","LabelTask","span","labelStyles","options","isCorrect","isCheckTasksActive","InputField","title","value","className","placeholder","onChange","max","min","type","defaultProps","WrapperInputMathOperators","disabledStyles","disabled","cursor","InputMathOperators","checked","htmlFor","style","id","TaskListWrapper","ul","InputFieldResult","taskToDo","LiWrapper","li","CounterItem","displayName","taskListSlice","createSlice","name","initialState","tasks","reducers","generateTasksReducer","state","action","payload","updateUserAnswer","updateTask","actionPayload","map","el","userAnswer","correctDone","correctResult","done","actions","ListItem","dispatch","useDispatch","marginLeft","e","target","TasksList","taskObj","task","HeaderWrapper","h4","Header","stringMath","require","createTasks","howManyTasks","howManyValues","maximumSingleValue","typeOfMathOperators","isPositiveResults","arrOfTasks","i","numberValue","j","number","Math","floor","random","push","sort","a","b","matchTask","index","randomMathOperator","length","join","String","calculateDoneTasks","tasksArray","tasksLength","filter","correctAnswer","leftToDo","correctToDo","InformationAboutResultWrapper","Statistics","statistics","useSelector","isEqual","checks","statisticsSlice","updateChecks","resetChecks","updateCorrectDone","BottomSection","SectionWrapper","App","taskList","useState","setHowManyTasks","setHowManyValues","setMaximumSingleValue","setTypeOfMathOperators","setIsCheckTasksActive","setIsPositiveResults","generateTasks","newTask","handleMathOperatorChange","mathOperator","newArr","padding","column","includes","backgroundColor","onClick","window","confirm","scroll","top","behavior","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26f814ab.chunk.js","sourcesContent":["export const white = '#fff';\r\nexport const yellow = '#ffd400'\r\nexport const orange = '#FFA233';\r\nexport const green = '#00ff44';\r\nexport const darkGreen = 'darkgreen'\r\nexport const gray = '#A4A4A4';\r\nexport const black = '#000';\r\nexport const red = '#ff0000'\r\n","import { white } from \"../colors\";\r\n\r\nexport const paddingButton = '10px 30px';\r\nexport const paddingTopBottom = '3px 0';\r\n\r\nexport const borderWidth = '2px';\r\nexport const borderRadius = '4px';\r\nexport const border = `${borderWidth} ${white} solid`;\r\n\r\nexport const transition = '.5s';\r\nexport const outlineColor = `${white}`;\r\n\r\nexport const opacity = .6;\r\n\r\n// RWD\r\n\r\nexport const rwdExtraSmallDevices = 'max-width: 600px';\r\nexport const rwdSmallDevices = 'max-width: 600px';\r\nexport const rwdTablet = 'min-width: 768px';\r\nexport const rwdLargeDevices = 'min-width: 992px';\r\nexport const rwdExtraLargeDevices = 'min-width: 1200px';\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nimport { darkGreen } from \"colors\";\r\nimport { border, borderRadius } from \"variables\";\r\n\r\nexport const GroupButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  background-color: ${darkGreen};\r\n`;\r\n\r\nexport const pulseLight = keyframes`\r\n  0% {\r\n    background-image: linear-gradient(\r\n               to right,\r\n               transparent 33%,\r\n               rgba(255,255,255,0.4) 50%,\r\n               transparent 66%\r\n       );\r\n           background-size:300% 100%;\r\n\t  \r\n  }\r\n  100% {\r\n    background-position: right;\r\n    background-image: linear-gradient(\r\n            to right,\r\n            transparent 33%,\r\n            rgba(255,255,255,0.4) 50%,\r\n            transparent 66%\r\n    );\r\n    background-size:300% 100%;\r\n  }\r\n`;\r\n\r\n\r\nexport const GlassButtonWrapper = styled.button`\r\n  color: ${(props) => props.color ? props.color : '#fff'};\r\n  background-color: transparent;\r\n  font-weight: 400;\r\n  font-size: .7rem;\r\n  line-height: 1.8rem;\r\n  padding: .3rem 1.9rem;\r\n  flex: 1 1 auto;\r\n  display: inline-block;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  text-transform: uppercase;\r\n  box-sizing: border-box;\r\n  \r\n  border: ${border};\r\n  border-radius: ${borderRadius};\r\n  transition: 0.3s;\r\n  \r\n  &:hover {\r\n    animation-name: ${pulseLight};\r\n    animation-duration: 3s;\r\n    animation-iteration-count: infinite;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\n// .white {\r\n//     border: 2px solid #fff;\r\n//     border-radius: 3px;\r\n//     font-size: 1.8rem;\r\n//     text-transform: uppercase;\r\n//     color: #fff;\r\n//     line-height: 3.8rem;\r\n//     width: 100%;\r\n//     max-width: 320px;\r\n//     -webkit-transition: 0.3s;\r\n//     transition: 0.3s;\r\n// }\r\n\r\n// .white:hover {\r\n//     background-color: rgba(255, 255, 255, 0.2);\r\n// }\r\n\r\n// .pulse-light {\r\n//     background-image: linear-gradient(\r\n//         to right,\r\n//         transparent 33%,\r\n//         rgba(255,255,255,0.4) 50%,\r\n//         transparent 66%\r\n// );\r\n//     background-size:300% 100%;\r\n//     animation: shine 5s infinite;\r\n// }\r\n\r\n\r\n// .pulse-dark {\r\n//     background-image: linear-gradient(\r\n//         to right,\r\n//         transparent 33%,\r\n//         rgba(0,0,0,0.1) 50%,\r\n//         transparent 66%\r\n// );\r\n//     background-size:300% 100%;\r\n//     animation: shine 5s infinite;\r\n// }\r\n\r\n\r\n","import React from 'react';\r\nimport { GlassButtonWrapper } from \"./styles\";\r\n\r\nfunction Button({label, ...props}) {\r\n    return (\r\n        <GlassButtonWrapper {...props}>\r\n            {label}\r\n        </GlassButtonWrapper>\r\n    );\r\n}\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\nimport { border, borderRadius, opacity, paddingTopBottom } from \"variables\";\r\nimport { darkGreen, red, white } from \"colors\";\r\nimport { pulseLight } from \"components/Button/styles\";\r\n\r\nexport const WrapperInputField = styled.div`\r\n  padding: ${paddingTopBottom};\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: ${({horizontalLabel}) => horizontalLabel ? 'row' : 'column'};\r\n  color: ${white};\r\n`;\r\n\r\nexport const LabelField = styled(Label)`\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const LabelResult = styled(Label)`\r\n  flex-direction: row;\r\n  align-items: center;\r\n  flex: 0 0 auto;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 5px;\r\n  outline: none;\r\n  background-color: ${darkGreen};\r\n  color: ${white};\r\n  border: ${border};\r\n  border-radius: ${borderRadius};\r\n  flex: 0 0 auto;\r\n\r\n  &:focus {\r\n    animation-name: ${pulseLight};\r\n    animation-duration: 3s;\r\n    animation-iteration-count: infinite;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n  }\r\n\r\n  &::placeholder {\r\n    color: ${white};\r\n    opacity: ${opacity};\r\n  }\r\n\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const LabelTask = styled.span`\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nexport const labelStyles = (options = {}) => {\r\n    const {isCorrect, isCheckTasksActive} = options;\r\n    if (!isCheckTasksActive) return;\r\n    return {\r\n        color: `${isCorrect ? white : red}`\r\n    }\r\n\r\n}","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Input, LabelField, WrapperInputField } from './styles';\r\n\r\nInputField.propTypes = {\r\n    max: PropTypes.number,\r\n    min: PropTypes.number,\r\n};\r\n\r\nInputField.defaultProps = {\r\n    max: 5,\r\n    min: 1,\r\n};\r\n\r\nfunction InputField({title, value, className, placeholder, horizontalLabel, onChange, max, min, ...props}) {\r\n    return (\r\n        <WrapperInputField>\r\n            <LabelField {...{horizontalLabel}}>{title}\r\n                <Input\r\n                    {...props}\r\n                    {...{value, className, onChange, max, min}}\r\n                    type=\"number\"\r\n                    placeholder={placeholder || title}\r\n                />\r\n            </LabelField>\r\n        </WrapperInputField>\r\n    );\r\n}\r\n\r\nexport default InputField;","import styled from 'styled-components';\r\n\r\nimport { white } from 'colors';\r\nimport { border, borderRadius, borderWidth, transition, opacity } from \"variables\";\r\nimport { pulseLight } from \"components/Button/styles\";\r\n\r\nexport const WrapperInputMathOperators = styled.div`\r\n  border: ${borderWidth} solid transparent;\r\n  border-radius: ${borderRadius};\r\n  transition: ${transition};\r\n  \r\n  &:hover {\r\n    border: ${border};\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  padding: 0 5px ;\r\n  color: ${white};\r\n\r\n  &:hover {\r\n    animation-name: ${pulseLight};\r\n    animation-duration: 3s;\r\n    animation-iteration-count: infinite;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n\r\nexport const disabledStyles = (options = {}) => {\r\n    const { disabled } = options;\r\n    return {\r\n        cursor: disabled && 'not-allowed',\r\n        // opacity: `${opacity}`,\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Input, Label, WrapperInputMathOperators, disabledStyles } from './styles'\r\n\r\nfunction InputMathOperators({type, value, disabled, checked, onChange}) {\r\n\r\n    return (\r\n        <WrapperInputMathOperators>\r\n            <Label htmlFor={type} style={disabledStyles({disabled})}>\r\n                {type}\r\n                <Input {...{value, disabled, checked}}\r\n                       type=\"checkbox\"\r\n                       id={type}\r\n                       onChange={onChange}\r\n                       style={disabledStyles({disabled})}\r\n                />\r\n            </Label>\r\n        </WrapperInputMathOperators>\r\n    );\r\n}\r\n\r\nexport default InputMathOperators;","import styled from 'styled-components';\r\nimport { opacity } from \"variables\";\r\n\r\nexport const TaskListWrapper = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n\r\n  li input {\r\n    opacity: ${({isCheckTasksActive}) => isCheckTasksActive ? `${opacity}` : 1};\r\n  }\r\n}\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Input, LabelResult, WrapperInputField, labelStyles, LabelTask } from './styles';\r\n\r\nfunction InputFieldResult({\r\n                              taskToDo,\r\n                              className,\r\n                              placeholder,\r\n                              horizontalLabel,\r\n                              onChange,\r\n                              isCheckTasksActive,\r\n                              isCorrect,\r\n                              ...props\r\n                          }) {\r\n    return (\r\n        <WrapperInputField>\r\n            <LabelResult>\r\n                <LabelTask style={labelStyles({isCorrect, isCheckTasksActive})}>{taskToDo}</LabelTask>\r\n                <Input\r\n                    {...props}\r\n                    {...{className, onChange}}\r\n                    type=\"text\"\r\n                    placeholder={placeholder || taskToDo}\r\n                    disabled={isCheckTasksActive}\r\n                />\r\n            </LabelResult>\r\n        </WrapperInputField>\r\n    );\r\n}\r\n\r\nexport default InputFieldResult;","import styled from \"styled-components\";\r\nimport { white } from \"colors\";\r\nimport { opacity } from \"variables\";\r\n\r\nexport const LiWrapper = styled.li`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  align-items: center;\r\n  flex: 1 1 auto;\r\n`;\r\n\r\nexport const CounterItem = styled.span`\r\n  color: ${white};\r\n  opacity: ${opacity};\r\n`;\r\n\r\nCounterItem.displayName = 'ListItem_CounterItem'\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const taskListSlice = createSlice({\r\n    name: 'taskList',\r\n    initialState: {\r\n        tasks: [],\r\n    },\r\n    reducers: {\r\n        generateTasksReducer: (state, action) => {\r\n            state.tasks = action.payload\r\n        },\r\n        updateUserAnswer: (state, action) => {\r\n            state.tasks = updateTask(state.tasks, action.payload);\r\n        }\r\n    }\r\n});\r\n\r\nconst updateTask = (tasks, actionPayload) => {\r\n    const {id, value} = actionPayload;\r\n    return tasks.map(el => el.id === id ?\r\n        {...el, userAnswer: value, correctDone: el.correctResult === value, done: value !== ''} :\r\n        {...el})\r\n}\r\n\r\nexport const { generateTasksReducer, updateUserAnswer } = taskListSlice.actions;\r\n\r\nexport default taskListSlice.reducer","import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport InputFieldResult from \"components/InputField/InputFieldResult\";\r\nimport { CounterItem, LiWrapper } from \"./styles\";\r\nimport { updateUserAnswer } from 'components/TasksList/taskListSlice'\r\n\r\nfunction ListItem({taskToDo, isCheckTasksActive, id, userAnswer, done}) {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleValueChange = (e) => {\r\n        dispatch(updateUserAnswer({id, value: e.target.value}))\r\n    }\r\n\r\n    return (\r\n        <LiWrapper>\r\n            <CounterItem>{id + 1}.</CounterItem>\r\n            <InputFieldResult {...{isCheckTasksActive, taskToDo}}\r\n                              value={userAnswer}\r\n                              isCorrect={done}\r\n                              placeholder='Enter the result'\r\n                              style={{marginLeft: '10px'}}\r\n                              horizontalLabel\r\n                              onChange={handleValueChange}\r\n            />\r\n        </LiWrapper>\r\n    );\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport { TaskListWrapper } from \"./styles\";\r\nimport ListItem from 'components/ListItem/ListItem';\r\n\r\nfunction TasksList({tasks, isCheckTasksActive}) {\r\n    if (!tasks) return null;\r\n\r\n    return (\r\n        <TaskListWrapper {...{isCheckTasksActive}}>\r\n            {tasks.map((taskObj) => {\r\n                const {id, task, correctResult, userAnswer, done} = taskObj;\r\n                return <ListItem key={id} taskToDo={task} {...{isCheckTasksActive, id, correctResult, userAnswer, done}} />\r\n            })}\r\n        </TaskListWrapper>\r\n    );\r\n}\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\nimport { white } from \"colors\";\r\nimport { opacity } from 'variables';\r\n\r\nexport const HeaderWrapper = styled.h4`\r\n  color: ${white};\r\n  opacity: ${opacity};\r\n  margin: 0;\r\n  font-weight: 400;\r\n`;","import React from 'react';\r\nimport { HeaderWrapper } from \"./styles\";\r\n\r\nfunction Header({title, value}) {\r\n    return <HeaderWrapper>{title}: {value}</HeaderWrapper>;\r\n}\r\n\r\nexport default Header;","var stringMath = require('string-math');\r\n\r\nfunction createTasks({ howManyTasks, howManyValues, maximumSingleValue, typeOfMathOperators, isPositiveResults }) {\r\n    const arrOfTasks = [];\r\n\r\n    for (let i = 0; i < howManyTasks; i++) {\r\n        const numberValue = [];\r\n\r\n        for (let j = 0; j < howManyValues; j++) {\r\n            const number = Math.floor(Math.random() * maximumSingleValue + 1);\r\n            numberValue.push(number);\r\n        }\r\n\r\n        if (isPositiveResults) {\r\n            numberValue.sort((a,b) => b - a);\r\n        }\r\n\r\n        const matchTask = numberValue.map((number, index) => {\r\n            const randomMathOperator = typeOfMathOperators[Math.floor(Math.random() * typeOfMathOperators.length)] || '+';\r\n            return `${number} ${index === numberValue.length - 1 ? '' : `${randomMathOperator} `}`\r\n        }).join('')\r\n\r\n        const taskObj = {\r\n            id: i,\r\n            task: matchTask,\r\n            correctResult: String(stringMath(matchTask)),\r\n            userAnswer: '',\r\n            done: false,\r\n            correctDone: false,\r\n        }\r\n\r\n        arrOfTasks.push(taskObj);\r\n    }\r\n\r\n    return arrOfTasks;\r\n}\r\n\r\nexport default createTasks;\r\n\r\n","const calculateDoneTasks = (tasksArray) => {\r\n    const tasksLength = tasksArray.length;\r\n    const done = tasksArray.filter(el => el.done).length;\r\n    const correctAnswer = tasksArray.filter(el => el.correctDone).length;\r\n\r\n    return {\r\n        done: `${done / tasksLength * 100}% (${done}/${tasksLength})`,\r\n        correctDone: `${correctAnswer / tasksLength * 100}% (${correctAnswer}/${tasksLength})`,\r\n        leftToDo: `${tasksLength-done}`,\r\n        correctToDo: `${tasksLength-correctAnswer}`,\r\n    };\r\n}\r\n\r\nexport default calculateDoneTasks;","import styled from \"styled-components\";\r\nimport { white } from 'colors'\r\nimport { paddingTopBottom } from \"variables\";\r\n\r\nexport const InformationAboutResultWrapper = styled.div`\r\n  color: ${white};\r\n  flex: 1 0 auto;\r\n  margin: 0;\r\n  padding: ${paddingTopBottom};\r\n`;","import React from 'react';\r\nimport { InformationAboutResultWrapper } from \"./style\";\r\nimport { useSelector } from \"react-redux\";\r\nimport isEqual from \"lodash.isequal\";\r\nimport Header from \"../Header/Header\";\r\n\r\nfunction Statistics() {\r\n    const statistics = useSelector(({statistics}) => statistics, isEqual)\r\n\r\n    return (\r\n        <InformationAboutResultWrapper>\r\n            <p>Your result is:</p>\r\n            <Header title='How mamy time do You check task?' value={statistics.checks} />\r\n            <Header title='Done' value={statistics.done} />\r\n            <Header title='Correctly done' value={statistics.correctDone} />\r\n            <Header title='Left to do' value={statistics.leftToDo} />\r\n            <Header title='Correct left to do' value={statistics.correctToDo} />\r\n        </InformationAboutResultWrapper>\r\n    );\r\n}\r\n\r\nexport default Statistics;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const statisticsSlice = createSlice({\r\n    name: 'statistics',\r\n    initialState: {\r\n        checks: 0,\r\n        done: 0,\r\n        correctDone: 0,\r\n        leftToDo: 0,\r\n        correctToDo: 0,\r\n    },\r\n    reducers: {\r\n        updateChecks: state => {\r\n            state.checks = state.checks + 1;\r\n        },\r\n        resetChecks: state => {\r\n            state.checks = 0;\r\n        },\r\n        updateCorrectDone: (state, action) => {\r\n            state.correctDone = action.payload.correctDone;\r\n            state.done = action.payload.done;\r\n            state.leftToDo = action.payload.leftToDo;\r\n            state.correctToDo = action.payload.correctToDo;\r\n        },\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const { updateChecks, resetChecks, updateCorrectDone } = statisticsSlice.actions;\r\n\r\nexport default statisticsSlice.reducer","import styled from \"styled-components\";\r\nimport {darkGreen} from \"colors\";\r\n\r\nexport const BottomSection = styled.div`\r\n  position: sticky;\r\n  bottom: 0;\r\n  background-color: ${darkGreen};\r\n`;\r\n\r\nexport const SectionWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 10px 0;\r\n`;","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Div from 'styled-kit/Div';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport 'App.css';\r\nimport Button from \"components/Button/Button\";\r\nimport InputField from \"components/InputField/InputField\";\r\nimport InputMathOperators from \"components/InputMathOperators/InputMathOperators\";\r\nimport { GroupButtonWrapper } from \"components/Button/styles\";\r\nimport TasksList from \"components/TasksList/TasksList\";\r\nimport Header from \"components/Header/Header\";\r\nimport { createTasks, calculateDoneTasks } from \"utils\";\r\nimport Statistics from \"./components/Statistics/Statistics\";\r\nimport { generateTasksReducer } from \"./components/TasksList/taskListSlice\";\r\nimport { updateChecks, resetChecks, updateCorrectDone } from \"components/Statistics/statisticsSlice\";\r\nimport { BottomSection, SectionWrapper } from \"./styles\";\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n\r\n    const taskList = useSelector(({taskList}) => ({ tasks: taskList.tasks }), isEqual);\r\n\r\n    // taskList.tasks.forEach(task => {\r\n    //     console.log(task.correctResult);\r\n    // })\r\n\r\n    const [howManyTasks, setHowManyTasks] = useState(5);\r\n    const [howManyValues, setHowManyValues] = useState(2);\r\n    const [maximumSingleValue, setMaximumSingleValue] = useState(10);\r\n    const [typeOfMathOperators, setTypeOfMathOperators] = useState([]);\r\n    const [isCheckTasksActive, setIsCheckTasksActive] = useState(false);\r\n    const [isPositiveResults, setIsPositiveResults] = useState(false);\r\n\r\n    const handleHowManyTasks = (e) => setHowManyTasks(e.target.value);\r\n\r\n    const handleHowManyValues = (e) => setHowManyValues(e.target.value);\r\n\r\n    const handleMaximumSingleValue = (e) => setMaximumSingleValue(e.target.value);\r\n\r\n    const generateTasks = () => {\r\n        const newTask = createTasks({\r\n            howManyTasks,\r\n            howManyValues,\r\n            maximumSingleValue,\r\n            typeOfMathOperators,\r\n            isPositiveResults,\r\n        })\r\n        dispatch(generateTasksReducer(newTask))\r\n    }\r\n\r\n    const handleGenerateTasks = () => {\r\n        if (taskList.tasks.length) {\r\n            const answer = window.confirm(\"Got a list, want to create a new one?\");\r\n          if (answer) {\r\n              generateTasks();\r\n              dispatch(resetChecks(0))\r\n              setIsCheckTasksActive(false);\r\n          }\r\n          return null;\r\n        }\r\n        return generateTasks();\r\n    };\r\n\r\n    const handleCheckTask = () => {\r\n        setIsCheckTasksActive(!isCheckTasksActive);\r\n        if (!isCheckTasksActive && taskList.tasks.length) {\r\n            dispatch(updateChecks())\r\n          dispatch(updateCorrectDone(calculateDoneTasks(taskList.tasks)))\r\n        }\r\n    };\r\n\r\n    const handleMathOperatorChange = (e) => {\r\n        const mathOperator = e.target.value;\r\n        const isChecked = e.target.checked;\r\n\r\n        if (isChecked) {\r\n            setTypeOfMathOperators([...typeOfMathOperators, mathOperator])\r\n        } else {\r\n            const newArr = typeOfMathOperators.filter(el => el !== mathOperator)\r\n            setTypeOfMathOperators(newArr);\r\n        }\r\n        if (mathOperator === '-') setIsPositiveResults(false);\r\n    }\r\n\r\n    const handlePositiveResultsChange = () => setIsPositiveResults(!isPositiveResults);\r\n\r\n    const goBackToTop = () => window.scroll({top: 0, behavior: 'smooth'});\r\n\r\n    return (\r\n        <Div padding={20} column>\r\n            <SectionWrapper column>\r\n                <Header title=\"Settings\"/>\r\n                <InputField title=\"how many tasks?\" value={howManyTasks} onChange={handleHowManyTasks} max={100} />\r\n                <InputField title=\"how many values to calculate?\" value={howManyValues} onChange={handleHowManyValues} max={5} min={2}/>\r\n                <InputField title=\"maximum single value?\" value={maximumSingleValue}\r\n                            onChange={handleMaximumSingleValue}\r\n                            max={10000}/>\r\n            </SectionWrapper>\r\n            <SectionWrapper column>\r\n                <Header title=\"Type of mathematical operations\"/>\r\n                <InputMathOperators type='addition' value='+' onChange={handleMathOperatorChange}/>\r\n                <InputMathOperators type='subtraction' value='-' onChange={handleMathOperatorChange}/>\r\n                <InputMathOperators type='multiplication' value='*' onChange={handleMathOperatorChange}/>\r\n                <InputMathOperators type='division' value='/' onChange={handleMathOperatorChange}/>\r\n                <InputMathOperators type='positive-results' value={isPositiveResults} onChange={handlePositiveResultsChange} disabled={!typeOfMathOperators.includes('-')} checked={isPositiveResults} />\r\n            </SectionWrapper>\r\n            <SectionWrapper>\r\n                <Button label='generate task'\r\n                        backgroundColor='silver'\r\n                        onClick={handleGenerateTasks}\r\n                />\r\n            </SectionWrapper>\r\n\r\n            <SectionWrapper>\r\n                <TasksList {...{isCheckTasksActive}} tasks={taskList.tasks} />\r\n            </SectionWrapper>\r\n\r\n            <BottomSection>\r\n                {isCheckTasksActive && <Statistics />}\r\n                <GroupButtonWrapper >\r\n                    <Button label={isCheckTasksActive ? 'go to edit task' : 'check task'}\r\n                            backgroundColor='silver'\r\n                            onClick={handleCheckTask}\r\n                    />\r\n                    <Button\r\n                        onClick={goBackToTop}\r\n                        label='back to top'\r\n                        backgroundColor='silver'\r\n                    />\r\n                </GroupButtonWrapper>\r\n            </BottomSection>\r\n        </Div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport taskListSlice from \"components/TasksList/taskListSlice\";\r\nimport statisticsSlice from \"components/Statistics/statisticsSlice\";\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        taskList: taskListSlice,\r\n        statistics: statisticsSlice,\r\n    }\r\n})\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'index.css';\r\nimport App from 'App';\r\nimport reportWebVitals from 'reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './store'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider {...{store}}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}